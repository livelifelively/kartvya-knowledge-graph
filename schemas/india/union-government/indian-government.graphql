# SINGLE_NODE_TYPE
# one node that fans out to multiple nodes
# links to all nodes related to indian governments and its parts
# for now add everyone's latest version only or minimal text
type _Indian_Government_System_ {
  id: ID!

  country: _Country_Government_ @hasInverse(field: "india_government_system_active")

  # only meta data for now
  # TODO constitution should be a separate type
  # constitution: _Indian_Legal_Document_

  # all governments here
  union_governments: [_Indian_Union_Government_]

  ####################
  # UNION GOVERNMENT #
  ####################

  ### EXECUTIVE ###

  # head of union government
  prime_ministers: [_Indian_Prime_Minister_]
  # union government ministries
  cabinet_ministers: [_Indian_Union_Government_Cabinet_Minister_]
  # ministries and departments
  # union_government_ministries_departments: [_Indian_Ministry_Department_]

  ### LEGISLATIVE ###

  # union government legislative
  loksabha: [_Indian_Loksabha_]
  loksabha_constituencies: [_Indian_Loksabha_Constituency_]

  # administrative_divisions
  administrative_divisions: _Indian_Administrative_Divisions

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

enum _Government_Branches_ {
  Legislative
  Executive
  Judiciary
}

# kind of like a version group of the union government
# CREATE_NEW:
# 1. whenever the PM changes;
# 2. whenever loksabha changes
type _Indian_Union_Government_ {
  id: ID!

  prime_minister: _Indian_Prime_Minister_ @hasInverse(field: "government")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "government")
  # council_of_ministers: _Indian_Union_Council_Of_Ministers_ @hasInverse(field: "government")
  # TODO should have active members. we may need versions for cabinet_ministers
  # cabinet_ministers: [_Indian_Union_Government_Cabinet_Minister_] @hasInverse(field: "government")

  loksabha: _Indian_Loksabha_ @hasInverse(field: "union_government")
  # rajyasabha: versions of rajyasabha active during the government was in authority

  # TODO bill may need a separate type. when presented, when passed,
  # revisions and other different steps in the process
  # bills: [_Indian_Legal_Document_]
  # acts: [_Indian_Legal_Document_]

  ministries: [_Indian_Union_Government_Ministry_] @hasInverse(field: "union_government")
  departments: [_Indian_Union_Government_Department_] @hasInverse(field: "union_government")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever the Prime Minister changes
# whenever the loksabha changes
type _Indian_Prime_Minister_ {
  id: ID!

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_ @hasInverse(field: "prime_ministers")
  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "prime_minister")

  # during tenure
  government: [_Indian_Union_Government_] @hasInverse(field: "prime_minister")
  loksabha: _Indian_Loksabha_ @hasInverse(field: "prime_minister")
  # council_of_ministers: _Indian_Union_Council_Of_Ministers_ @hasInverse(field: "prime_minister")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "prime_minister")

  ministries: [_Indian_Union_Government_Ministry_] @hasInverse(field: "prime_minister")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CAN_BE_VERSIONS? - this is temporal. so dont need versions.
# CREATE_NEW:
# whenever any change made to the cabinet. even a single change. does what versioning is for.
# same as council of ministers.
type _Indian_Union_Government_Cabinet_ {
  id: ID!

  government: _Indian_Union_Government_ @hasInverse(field: "cabinet")
  loksabha: _Indian_Loksabha_ @hasInverse(field: "cabinet")
  prime_minister: _Indian_Prime_Minister_ @hasInverse(field: "cabinet")

  # FIXME
  # do we need ministries?
  # FOR: links ministers, minister of states, independent charge ministers by ministry; only links, no redundant info;
  # AGAINST: breaks hierarchy;
  ministries: [_Indian_Union_Government_Ministry_] @hasInverse(field: "cabinet")

  cabinet_ministers: [_Indian_Union_Government_Cabinet_Minister_] @hasInverse(field: "cabinet")
  minister_of_state: [_Indian_Union_Government_Minister_Of_State_] @hasInverse(field: "cabinet")
  minister_of_state_independent_charge: [_Indian_Union_Government_Minister_Of_State_Independent_Charge_]
    @hasInverse(field: "cabinet")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever any new minister-ministry combination is added
type _Indian_Union_Government_Cabinet_Minister_ {
  id: ID!

  # FIXME: See if we need redundant linking
  # loksabha: _Indian_Loksabha_
  # prime_minister: _Indian_Prime_Minister_
  # government: _Indian_Union_Government_

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_ @hasInverse(field: "cabinet_ministers")

  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "cabinet_minister")
  ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "minister")

  # council_of_ministers: _Indian_Union_Council_Of_Ministers_ @hasInverse(field: "council_member_ministers")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "cabinet_ministers")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever any new minister-ministry combination is added
type _Indian_Union_Government_Minister_Of_State_Independent_Charge_ {
  id: ID!

  # loksabha: _Indian_Loksabha_
  # prime_minister: _Indian_Prime_Minister_
  # government: _Indian_Union_Government_

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_
    @hasInverse(field: "minister_of_state_independent_charge")

  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "minister_of_state_independent_charge")

  ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "minister_of_state_independent_charge")
  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "minister_of_state_independent_charge")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever any new minister-ministry combination is added
type _Indian_Union_Government_Minister_Of_State_ {
  id: ID!

  # loksabha: _Indian_Loksabha_
  # prime_minister: _Indian_Prime_Minister_
  # government: _Indian_Union_Government_

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_ @hasInverse(field: "minister_of_state")

  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "minister_of_state")

  ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "minister_of_state")
  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "minister_of_state")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}
