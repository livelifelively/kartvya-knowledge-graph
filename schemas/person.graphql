type _Person_ {
  id: ID!

  names: [_Name_] @hasInverse(field: "person")

  born: _Date_Time_
  died: _Date_Time_

  # Should not be separate wikipedia node.
  # 1:1 relationship. Will be another high fanout node.
  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  indian_politician: _Indian_Politician_ @hasInverse(field: "person")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# SINGLE_NODE_TYPE
type _Indian_Politician_ {
  id: ID!

  # names: [_Name_!]! @hasInverse(field: "indian_politician")

  political_party_memberships: [_Indian_Political_Party_Member_] @hasInverse(field: "politician")

  person: _Person_ @hasInverse(field: "indian_politician")

  # elections in which participated
  loksabha_elections_contested: [_Indian_Loksabha_Constituency_Election_Candidate_] @hasInverse(field: "candidate")

  # official positions held
  loksabha_member: [_Indian_Loksabha_Member_] @hasInverse(field: "position_held_by")
  # rajyasabha_member: [_Indian_Rajyasabha_Member_]
  # vidhansabha_member: [_Indian_Vidhansabha_Member_]
  prime_minister: [_Indian_Prime_Minister_] @hasInverse(field: "position_held_by")
  cabinet_minister: [_Indian_Union_Government_Cabinet_Minister_] @hasInverse(field: "position_held_by")
  minister_of_state_independent_charge: [_Indian_Union_Government_Minister_Of_State_Independent_Charge_]
    @hasInverse(field: "position_held_by")
  minister_of_state: [_Indian_Union_Government_Minister_Of_State_] @hasInverse(field: "position_held_by")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}