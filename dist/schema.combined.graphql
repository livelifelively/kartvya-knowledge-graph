# COMBINED SCHEMA
# Auto-generated from schema files


# ----- meta-data.graphql ----- 
type _Node_Update_ {
  id: ID!
  comment: String
  updated_on: DateTime @search
}
# ----- END meta-data.graphql ----- 

# ----- auth/auth.graphql ----- 
# USER AUTHENTICATION
# values in camelcase are due to @auth/core adapter type definition

type Account {
  id: ID!

  type: String
  provider: String @search(by: [hash])
  providerAccountId: String @search(by: [hash])
  refreshToken: String
  expires_at: Int64
  accessToken: String
  token_type: String
  refresh_token: String
  access_token: String
  scope: String
  id_token: String
  session_state: String
  user: User @hasInverse(field: "accounts")
}

type Session {
  id: ID!

  expires: DateTime
  sessionToken: String @search(by: [hash])
  user: User @hasInverse(field: "sessions")
}

type User {
  id: ID!

  name: String
  email: String @id
  emailVerified: DateTime
  image: String
  accounts: [Account] @hasInverse(field: "user")
  sessions: [Session] @hasInverse(field: "user")
  citizen_profile: _Citizen_Profile_ @hasInverse(field: "user")
}

type VerificationToken {
  id: ID!

  identifier: String @search(by: [hash])
  token: String @search(by: [hash])
  expires: DateTime
}

# ----- END auth/auth.graphql ----- 

# ----- auth/citizen.graphql ----- 
type _Citizen_Profile_ {
  id: ID!

  user: User @hasInverse(field: "citizen_profile")

  # for now country defaults to India
  # country: [_Country_]

  # what should the user follow? region version or entity?
  # I think root entity it holds the identity of the region for the given time and connects to everything else.
  state_or_union_territories: [_Indian_State_Union_Territory_] @hasInverse(field: "citizen_followers")
  districts: [_Indian_District_] @hasInverse(field: "citizen_followers")
  loksabha_constituencies: [_Indian_Loksabha_Constituency_] @hasInverse(field: "citizen_followers")
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_] @hasInverse(field: "citizen_followers")

  # policy subjects
  policy_domains: [_Public_Policy_Domain_] @hasInverse(field: "citizen_followers")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END auth/citizen.graphql ----- 

# ----- language.graphql ----- 
# language and scripts
# text, especially names can be in multiple languages and scripts
type _Language_ {
  id: ID!

  name_en: String! @id
  names: [_Name_] @hasInverse(field: "language")
  scripts: [_Script_] @hasInverse(field: "languages")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Script_ {
  id: ID!

  name_en: String! @id
  names: [_Name_] @hasInverse(field: "script")
  languages: [_Language_] @hasInverse(field: "scripts")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# instance of language + script combination.
type _Language_Script_ {
  id: ID!

  name_en: String! @id
  language: _Language_!
  script: _Script_!

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}
# ----- END language.graphql ----- 

# ----- name.graphql ----- 
# the "WHO" of 5W1H #ENTRY_NODE
# #ENTRY_NODE
# name of all entities in the knowledge graph.
# an entry point for all.
# one name can be shared by multiple entities.
type _Name_ {
  id: ID!

  name: String! @id @search(by: [hash, term, fulltext])

  # a set of characters can be same for different combinations of languages and scripts
  language_script: [_Language_Script_]
  case_sensitive: Boolean

  # NAMES OF Languages and Scripts
  language: [_Language_] @hasInverse(field: "names")
  script: [_Script_] @hasInverse(field: "names")

  person: [_Person_] @hasInverse(field: "names")

  metric: [_Metric_] @hasInverse(field: "names")
  metric_unit: [_Metric_Unit_] @hasInverse(field: "names")

  # NAMES OF public policy domains like defence, healthcare etc.
  public_policy_domain: [_Public_Policy_Domain_] @hasInverse(field: "names")
  public_policy_domain_group: [_Public_Policy_Domain_Group_] @hasInverse(field: "names")

  # NAMES OF Countries
  country: [_Country_] @hasInverse(field: "names")
  # in_zonal_council: [_IN_Zonal_Council_]

  map_data_source_name: [_Source_] @hasInverse(field: "names")

  country_event: [_Country_Event_] @hasInverse(field: "names")
  country_government: [_Country_Government_] @hasInverse(field: "names")

  government_system_type_economic_system: [_Government_System_Types_Economic_System_] @hasInverse(field: "names")
  government_system_type_religion: [_Government_System_Types_Religion_] @hasInverse(field: "names")
  government_system_type_head_of_state_or_government: [_Government_System_Types_Head_Of_State_Or_Government]
    @hasInverse(field: "names")
  government_system_type_partisan_systems: [_Government_System_Types_Partisan_Systems_] @hasInverse(field: "names")
  government_system_type_democracy: [_Government_System_Types_Democracy_] @hasInverse(field: "names")
  government_system_type_oligarchy: [_Government_System_Types_Oligarchy_] @hasInverse(field: "names")
  government_system_type_autocratic: [_Government_System_Types_Autocratic_] @hasInverse(field: "names")
  government_system_type_monarchy: [_Government_System_Types_Monarchy_] @hasInverse(field: "names")
  government_system_type_authority_distribution: [_Government_System_Types_Authority_Distribution_]
    @hasInverse(field: "names")
  government_system_type_authority_concentration: [_Government_System_Types_Authority_Concentration_]
    @hasInverse(field: "names")
  government_system_type_authority_source: [_Government_System_Types_Authority_Source_] @hasInverse(field: "names")
  government_system_type_authority_status: [_Government_System_Types_Authority_Status_] @hasInverse(field: "names")

  indian_union_government_department: [_Indian_Union_Government_Department_] @hasInverse(field: "names")
  indian_union_government_ministry: [_Indian_Union_Government_Ministry_] @hasInverse(field: "names")
  indian_union_government_official_role: [_Indian_Union_Government_Official_Role_] @hasInverse(field: "names")

  indian_union_parliament_loksabha: [_Indian_Loksabha_] @hasInverse(field: "names")

  indian_loksabha_constituency: [_Indian_Loksabha_Constituency_] @hasInverse(field: "names")
  indian_loksabha_constituency_reorganisation: [_Indian_Loksabha_Constituency_Reorganisation_]
    @hasInverse(field: "names")
  indian_loksabha_election: [_Indian_Loksabha_Election_] @hasInverse(field: "names")

  indian_vidhansabha_constituency: [_Indian_Vidhansabha_Constituency_] @hasInverse(field: "names")
  indian_vidhansabha_constituency_reorganisation: [_Indian_Vidhansabha_Constituency_Reorganisation_]
    @hasInverse(field: "names")

  indian_state_union_territory: [_Indian_State_Union_Territory_] @hasInverse(field: "names")
  indian_state_union_territory_reorganisation: [_Indian_State_Union_Territory_Reorganisation_]
    @hasInverse(field: "names")

  indian_district: [_Indian_District_] @hasInverse(field: "names")
  indian_district_reorganisation: [_Indian_District_Reorganisation_] @hasInverse(field: "names")

  indian_sub_district: [_Indian_Sub_District_] @hasInverse(field: "names")
  indian_sub_district_reorganisation: [_Indian_Sub_District_Reorganisation_] @hasInverse(field: "names")

  indian_political_party: [_Indian_Political_Party_] @hasInverse(field: "names")

  indian_legal_document: [_Indian_Legal_Document_] @hasInverse(field: "names")

  indian_union_government_service: [_Indian_Union_Government_Service_] @hasInverse(field: "names")
  indian_union_government_service_benefit: [_Indian_Union_Government_Service_Benefit_] @hasInverse(field: "names")
  indian_union_government_service_delivery_node: [_Indian_Union_Government_Service_Delivery_Node_]
    @hasInverse(field: "names")
  indian_union_government_service_delivery_node_instance: [_Indian_Union_Government_Service_Delivery_Node_Instance_]
    @hasInverse(field: "names")
  indian_union_government_service_delivery_node_instance_version: [_Indian_Union_Government_Service_Delivery_Node_Instance_Version_]
    @hasInverse(field: "names")

  indian_union_government_ministry_program: [_Indian_Union_Government_Ministry_Program_] @hasInverse(field: "names")

  indian_union_government_policy_documents: [_Indian_Union_Government_Policy_Document_] @hasInverse(field: "names")

  indian_union_government_policy_domain_objectives: [_Indian_Union_Government_Policy_Domain_Objective_]
    @hasInverse(field: "names")

  indian_administrative_region_reorganisation_event: [_Indian_Event_Administrative_Region_Reorganisation_]
    @hasInverse(field: "names")

  indian_ministry_program_reorganisation_event: [_Indian_Event_Ministry_Program_Reorganisation_]
    @hasInverse(field: "names")

  citizen_attribute_categories: [_Citizen_Attribute_Category_] @hasInverse(field: "names")
  citizen_group_attribute_categories: [_Citizen_Group_Attribute_Category_] @hasInverse(field: "names")

  indian_politician_transition_event: [_Indian_Event_Politician_Transition_] @hasInverse(field: "names")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END name.graphql ----- 

# ----- person/person.graphql ----- 
type _Person_ {
  id: ID!

  names: [_Name_] @hasInverse(field: "person")

  born: _Date_Time_
  died: _Date_Time_

  # Should not be separate wikipedia node.
  # 1:1 relationship. Will be another high fanout node.
  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  indian_politician: _Indian_Politician_ @hasInverse(field: "person")
  # indian_executive_official: _Indian_Executive_Official_ @hasInverse(field: "person")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END person/person.graphql ----- 

# ----- person/indian-politician.graphql ----- 
# SINGLE_NODE_TYPE
type _Indian_Politician_ {
  id: ID!

  political_party_memberships: [_Indian_Political_Party_Member_]

  person: _Person_ @hasInverse(field: "indian_politician")

  # elections in which participated
  loksabha_elections_contested: [_Indian_Loksabha_Constituency_Election_Candidate_] @hasInverse(field: "candidate")

  # official positions held
  loksabha_member: [_Indian_Loksabha_Member_]
  # rajyasabha_member: [_Indian_Rajyasabha_Member_]
  # vidhansabha_member: [_Indian_Vidhansabha_Member_]
  prime_minister: [_Indian_Prime_Minister_]
  cabinet_minister: [_Indian_Union_Government_Cabinet_Minister_]
  minister_of_state_independent_charge: [_Indian_Union_Government_Minister_Of_State_Independent_Charge_]
  minister_of_state: [_Indian_Union_Government_Minister_Of_State_]

  # Temporal fields
  versions: [_Indian_Politician_Version_] @hasInverse(field: "self")
  transitions: [_Indian_Politician_Transition_] @hasInverse(field: "politicians")
  active_version: _Indian_Politician_Version_

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Version of a politician at a specific point in time
type _Indian_Politician_Version_ {
  id: ID!

  self: _Indian_Politician_ @hasInverse(field: "versions")

  transition: _Indian_Politician_Transition_ @hasInverse(field: "politician_versions")

  # active positions
  # in government
  loksabha_member: [_Indian_Loksabha_Member_] @hasInverse(field: "position_held_by")
  prime_minister: _Indian_Prime_Minister_ @hasInverse(field: "position_held_by")
  cabinet_minister: [_Indian_Union_Government_Cabinet_Minister_] @hasInverse(field: "position_held_by")
  minister_of_state_independent_charge: [_Indian_Union_Government_Minister_Of_State_Independent_Charge_]
    @hasInverse(field: "position_held_by")
  minister_of_state: [_Indian_Union_Government_Minister_Of_State_] @hasInverse(field: "position_held_by")

  # in political party
  political_party_membership: [_Indian_Political_Party_Member_] @hasInverse(field: "politician")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Records changes to politician information
# this combines transitions of politicians in a single event
type _Indian_Politician_Transition_ {
  id: ID!

  politicians: [_Indian_Politician_] @hasInverse(field: "transitions")
  politician_versions: [_Indian_Politician_Version_] @hasInverse(field: "transition")

  # Link to the historical event that caused this transition
  historical_event: _Indian_Event_Politician_Transition_ @hasInverse(field: "politician_transitions")

  transition_date: _Date_Time_
  transition_type: _Indian_Politician_Transition_Type_ @search
  transition_description: String

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Events related to politician transitions in India
type _Indian_Event_Politician_Transition_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_] @hasInverse(field: "indian_politician_transition_event")

  description: String

  # Event metadata
  event_date: _Date_Time_
  event_type: _Indian_Politician_Transition_Type_ @search(by: [exact])

  # Official documents and references
  official_document_reference: String @search(by: [fulltext])
  official_document_url: String
  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  # Relationships to transitions
  politician_transitions: [_Indian_Politician_Transition_] @hasInverse(field: "historical_event")

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Enum for detailed politician transition types
enum _Indian_Politician_Transition_Type_ {
  # Party-related transitions
  Party_Membership_Joined
  Party_Membership_Left
  Party_Membership_Expelled
  Party_Membership_Suspended
  Party_Position_Appointed
  Party_Position_Removed
  Party_Position_Resigned

  # Government-related transitions
  Government_Position_Appointed
  Government_Position_Removed
  Government_Position_Resigned
  Government_Ministry_Assigned
  Government_Ministry_Removed
  Government_Ministry_Reshuffled
  Government_Cabinet_Inducted
  Government_Cabinet_Removed

  # Election-related transitions
  Election_Candidature_Declared
  Election_Candidature_Withdrawn
  Election_Result_Won
  Election_Result_Lost
  Election_Constituency_Changed

  # Legal-related transitions
  Legal_Status_Suspended
  Legal_Status_Reinstated
  Legal_Status_Disqualified
  Legal_Status_Convicted
  Legal_Status_Acquitted

  # Personal transitions
  Personal_Status_Retired
  Personal_Status_Deceased
  Personal_Status_HealthLeave

  # Other
  Other_Transition
}

# Active versions of all politicians at a point in time
# Simplifies queries to access all active politician versions at a specific time
type _Indian_Politician_Version_Group_ {
  id: ID!

  # name_id: String @search(by: [exact])
  description: String

  # The date and time this version group became active
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # Not bidirectional
  politicians: [_Indian_Politician_Version_]

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END person/indian-politician.graphql ----- 

# ----- sources.graphql ----- 
# describe source
type _Source_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  # about source
  names: [_Name_] @hasInverse(field: "map_data_source_name")
  source_description: String

  # link to source
  source_urls: [String]

  source_data: [_Source_Data_] @hasInverse(field: "source")
}

type _Source_Data_ {
  id: ID!

  source: _Source_ @hasInverse(field: "source_data")

  # urls specific to the data
  source_url: [String]
  # original stringified data for this instance
  source_data: String

  geo: [_Geo_] @hasInverse(field: "source")
}

# ----- END sources.graphql ----- 

# ----- geo.graphql ----- 
enum _Location_Or_Region_Category_ {
  Location
  Region
}

enum _Geo_Precision_ {
  # e.g. countries in world map on low res map image
  Extra_Low
  Low
  Medium
  High
  Very_High
  Near_Real_World
}

# the "WHERE" of 5W1H
# #ENTRY_NODE
# tile by tile geo information and how its related to political regions
type _Geo_ {
  id: ID!
  # CHANGE: not to include category, if has location,
  category: _Location_Or_Region_Category_ @search(by: [exact])

  source: _Source_Data_ @hasInverse(field: "geo")

  # if the category is location
  location: Point @search

  # if the category is region
  area: MultiPolygon @search

  # how close to real the map data is. kind of like confidence score
  precision: Int @search

  country_boundary_actual: _Country_Region_ @hasInverse(field: "geo_boundary_self_actual")
  country_boundary_self_official: _Country_Region_ @hasInverse(field: "geo_boundary_self_official")
  country_boundary_world_official: _Country_Region_ @hasInverse(field: "geo_boundary_world_official")

  india_zonal_council_divisions: _Country_Region_ @hasInverse(field: "geo_country_divisions_zonal_council")
  india_state_union_territory_divisions: _Country_Region_
    @hasInverse(field: "geo_country_divisions_state_union_territory")
  india_district_divisions: _Country_Region_ @hasInverse(field: "geo_country_divisions_district")
  india_vidhansabha_constituency_divisions: _Country_Region_
    @hasInverse(field: "geo_country_divisions_loksabha_constituency")
  india_loksabha_constituency_divisions: _Country_Region_
    @hasInverse(field: "geo_country_divisions_vidhansabha_constituency")

  indian_states_union_territory_boundary: _Indian_State_Union_Territory_Version_Region_
    @hasInverse(field: "geo_boundary")
  indian_district_boundary: _Indian_District_Version_Region_ @hasInverse(field: "geo_boundary")
  indian_sub_district_boundary: _Indian_Sub_District_Version_Region_ @hasInverse(field: "geo_boundary")

  indian_loksabha_constituency_boundary: _Indian_Loksabha_Constituency_Version_Region_
    @hasInverse(field: "geo_boundary")
  indian_vidhansabha_constituency_boundary: _Indian_Vidhansabha_Constituency_Version_Region_
    @hasInverse(field: "geo_boundary")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}
# ----- END geo.graphql ----- 

# ----- date-time.graphql ----- 
enum Date_Time_Precision_Category {
  Year
  Month
  Day
  Hour
  Minute
  Second
}

type _Date_Time_ {
  id: ID!

  date_time_id: String! @id @search(by: [exact, term, fulltext])

  year: Int @search
  month: Int @search
  day: Int @search
  hour: Int @search
  minute: Int @search
  second: Int @search

  timezone_independent: Boolean @search
  timezone: String @search

  date_time_precision: Date_Time_Precision_Category @search(by: [exact])

  from_datetime_country_event: [_Country_Event_] @hasInverse(field: "datetime_from")
  to_datetime_country_event: [_Country_Event_] @hasInverse(field: "datetime_to")

  indian_state_union_territory_established_on: [_Indian_State_Union_Territory_] @hasInverse(field: "established_on")
  indian_state_union_territory_disestablished_on: [_Indian_State_Union_Territory_]
    @hasInverse(field: "disestablished_on")

  indian_district_reorganisation: [_Indian_District_Reorganisation_] @hasInverse(field: "reorganised_on")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END date-time.graphql ----- 

# ----- metrics.graphql ----- 
enum _Metric_Data_Type_ {
  Categorical_Nominal
  Categorical_Ordinal
  Numerical_Discrete_Interval
  Numerical_Discrete_Ratio
  Numerical_Continuous_Interval
  Numerical_Continuous_Ratio
}

type _Metric_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_!]! @hasInverse(field: "metric")

  description: String
  tags: [String] @search(by: [exact, term, fulltext])

  units: [_Metric_Unit_!]! @hasInverse(field: "metric")
  dataType: _Metric_Data_Type_!
}

type _Metric_Unit_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_!]! @hasInverse(field: "metric_unit")

  description: String
  metric: _Metric_! @hasInverse(field: "units")
}

type _Data_Value_ {
  id: ID!
  metric: _Metric_
  unit: _Metric_Unit_

  numerical_value: Float
  categorical_value: String
}

# type _Data_Value_Indian_State_Union_Territory_ {
#   id: ID!

#   data_value: _Data_Value_!

#   datetime_from: _Date_Time_
#   datetime_to: _Date_Time_

#   # source: []

#   state_or_union_territory: _Indian_State_Union_Territory_!
# }

# type _Admin_Region_Data_Time_Range {
#   id: ID!

#   data_value: _Data_Value_

#   datetime_from: _Date_Time_
#   datetime_to: _Date_Time_

#   administrative_region: Administrative_Region
# }

# ----- END metrics.graphql ----- 

# ----- country.graphql ----- 
# the "WHAT" of 5W1H.
# will have to have multiple node types for the events.
#
type _Country_Event_ {
  id: ID!

  # if involves multiple countrys
  country: [_Country_] @hasInverse(field: "events")

  # specific to this event. should be able to identify the event and country.
  # would be best if the value can be unique, though not setting that as a condition as of now.
  names: [_Name_] @hasInverse(field: "country_event")
  description: String! @search(by: [exact, fulltext, term])

  # broad categories. "term criteria": can be applicable to any country.
  # "Declared Independence", "Civil War", "Independence Day", "Declared as Republic", "Declared War", "Hoasted Olympic", "Launched a Sattelite"
  # cannot be an enum (at least at this point) since can have too many values,
  # unless we reach a point where we have a sure number which may not change much.
  event_type: String! @search(by: [exact, fulltext, term])

  # time range event or one time
  one_time_event: Boolean

  datetime_from: _Date_Time_! @hasInverse(field: "from_datetime_country_event")
  datetime_to: _Date_Time_ @hasInverse(field: "to_datetime_country_event")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Country_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_!]! @hasInverse(field: "country")

  regions: [_Country_Region_] @hasInverse(field: "country")

  government: _Country_Government_ @hasInverse(field: "governs_country")

  events: [_Country_Event_] @hasInverse(field: "country")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# political regions associated with and within a country
type _Country_Region_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  country: _Country_ @hasInverse(field: "regions")

  # date on which the region changed
  # e.g. sikkim added to India
  # version: DateTime @search

  established: _Country_Event_
  disestablished: _Country_Event_

  # how the country region related to other region types
  # capital: [_Countryal_Capital_City_]
  # zonal_council: [_IN_Zonal_Council_Region_] @hasInverse(field: "country")
  # state: [_IN_State_Region_] @hasInverse(field: "country")
  # union_territory: [_IN_Union_Territory_Region_] @hasInverse(field: "country")

  # array because, there can be multiple version with varying precision.
  # low precision for maps, high precicion for search and computation
  geo_boundary_self_actual: [_Geo_] @hasInverse(field: "country_boundary_actual")

  # boundaries recognized by the national authorities
  # e.g. PoK is part of India as per Indian government, although its not under GOI administration
  geo_boundary_self_official: [_Geo_] @hasInverse(field: "country_boundary_self_official")
  # a country may accept or reject borders of certain countries based on its foriegn policy
  # this is the world map as per the country
  geo_boundary_world_official: [_Geo_] @hasInverse(field: "country_boundary_world_official")

  geo_country_divisions_zonal_council: [_Geo_] @hasInverse(field: "india_zonal_council_divisions")
  geo_country_divisions_state_union_territory: [_Geo_] @hasInverse(field: "india_state_union_territory_divisions")
  geo_country_divisions_district: [_Geo_] @hasInverse(field: "india_district_divisions")
  geo_country_divisions_loksabha_constituency: [_Geo_] @hasInverse(field: "india_vidhansabha_constituency_divisions")
  geo_country_divisions_vidhansabha_constituency: [_Geo_] @hasInverse(field: "india_loksabha_constituency_divisions")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Country_Government_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  # Government of India, भारत सरकार
  names: [_Name_!]! @hasInverse(field: "country_government")

  governs_country: _Country_ @hasInverse(field: "government")

  # official declaration of government system
  active_government_system_type_official: _Government_System_Type_ @hasInverse(field: "active_official_system_type_of")

  # world country governments
  # to add country specific data to each one
  # one country can have had variety of government systems in the past
  # individual type can help adapt to the country specific needs
  # e.g. India had in the past, a dominion government, provisional government, british-colony government, east indian company government
  india_government_system_active: _Indian_Government_System_ @hasInverse(field: "country")
  # india_government_system_active: [_Indian_Government_System_] @hasInverse(field: "country")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}
# ----- END country.graphql ----- 

# ----- government-system-types.graphql ----- 
type _Government_System_Type_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  description: String
  # if official system definition
  active_official_system_type_of: _Country_Government_ @hasInverse(field: "active_government_system_type_official")

  # what is the current status of the authority
  authority_status_type: [_Government_System_Types_Authority_Status_] @hasInverse(field: "government_system_type")

  # where does the authority reside? monarchy - in the family or individual, republic - in the people
  authority_source_type: [_Government_System_Types_Authority_Source_]! @hasInverse(field: "government_system_type")

  # where is authority concentrated?
  authority_concentration_type: [_Government_System_Types_Authority_Concentration_!]!
    @hasInverse(field: "government_system_type")

  # how is authority distributed?
  authority_distribution_type: _Government_System_Types_Authority_Distribution_!
    @hasInverse(field: "government_system_type")

  # if authority origin is heriditary i.e. monarchy
  monarchy_type: _Government_System_Types_Monarchy_ @hasInverse(field: "government_system_type")

  # if authority concentrated as autocracy
  autocratic_type: _Government_System_Types_Autocratic_ @hasInverse(field: "government_system_type")

  # if authority concentrated as oligarchy
  oligarchy_type: _Government_System_Types_Oligarchy_ @hasInverse(field: "government_system_type")

  # If authority is concentrated in elected representatives
  democracy_type: [_Government_System_Types_Democracy_] @hasInverse(field: "government_system_type")

  # if democracy, how many parties are capable of authority
  partisan_system_type: _Government_System_Types_Partisan_Systems_ @hasInverse(field: "government_system_type")

  # system of selecting head of the state
  head_of_state_or_government_system_type: _Government_System_Types_Head_Of_State_Or_Government!
    @hasInverse(field: "government_system_type")

  # how is the state related to religion
  religious_ideology_type: _Government_System_Types_Religion_! @hasInverse(field: "government_system_type")

  # how does the state control the resources flow
  economic_system_type: [_Government_System_Types_Economic_System_!]! @hasInverse(field: "government_system_type")

  established: _Country_Event_
  disestablished: _Country_Event_

  # #TODO
  # unicarmel/bicarmel - enum

  # change_type: Major | Minor | Patch
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# WHY HAVE MULTIPLE TYPES?
# we followed the flow of authority model
# where authority originates from a point and then on & on is eventually executed/evaluated/feedback
# there is a structure to it.
# there are some standard types for each step. e.g. authority_status can be stable, provisional, in-exile, emergency-powers-enabled
# these are standard values, there can be some custom vale for authority_status
# like externally-defended-internal-civil-unrest, where there is internal instability, but no external actors can intervene
# or like war-torn e.g. ukraine, where the government system is intact, but there are regions where government is not working.
type _Government_System_Types_Authority_Status_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_authority_status")
  description: String!

  governance_status: String!
  control_and_authority: String!
  objective_and_focus: String!
  international_recognition: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "authority_status_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Authority_Source_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_authority_source")
  description: String!

  source_of_legitimacy: String!
  power_structure: String!
  governance_mechanisms: String!
  role_of_leadership: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "authority_source_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Authority_Concentration_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_authority_concentration")
  description: String!

  authority_held_by: String!
  accountability_towards_people: String!
  power_hierarchy: [String!]
  public_access_to_means_of_peaceful_power_transfer: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "authority_concentration_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Authority_Distribution_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_authority_distribution")
  description: String!

  state_sovereignty: String!
  power_distribution: String!
  law_uniformity: String!
  central_authority_role: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "authority_distribution_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Monarchy_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_monarchy")
  description: String!

  authority_level: String!
  constitutional_limitations: String!
  governing_powers_in: String!
  power_source: String!
  reign_term: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "monarchy_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Autocratic_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_autocratic")
  description: String!

  leadership_origin: String!
  power_consolidation: String!
  formation_context: String!
  governance_style: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "autocratic_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Oligarchy_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_oligarchy")
  description: String!

  power_basis: String!
  selection_mechanism: String!
  governance_focus: String!
  stability_and_order: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "oligarchy_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Democracy_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_democracy")
  description: String!

  selection_method: String!
  governance_focus: String!
  participation_level: String!
  system_stability: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "democracy_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Partisan_Systems_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_partisan_systems")
  description: String!

  party_influence: String!
  government_formation: String!
  political_stability: String!
  representation: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "partisan_system_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Head_Of_State_Or_Government {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_head_of_state_or_government")
  description: String!

  leadership_structure: String!
  power_distribution: String!
  authority_scope: String!
  government_integration: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "head_of_state_or_government_system_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Religion_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_religion")
  description: String!

  religious_influence: String!
  religious_freedom: String!
  state_support: String!
  legal_framework: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "religious_ideology_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Government_System_Types_Economic_System_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "government_system_type_economic_system")
  description: String!

  ownership_and_control: String!
  societal_structure: String!
  economic_drivers: String!
  governance_approach: String!

  government_system_type: [_Government_System_Type_] @hasInverse(field: "economic_system_type")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}
# ----- END government-system-types.graphql ----- 

# ----- public-policy-domains.graphql ----- 
type _Public_Policy_Domain_Group_ {
  id: ID!

  name_id: String! @id @search(by: [hash, term])

  names: [_Name_] @hasInverse(field: "public_policy_domain_group")
  description: String

  domains_in_group: [_Public_Policy_Domain_] @hasInverse(field: "public_policy_domain_group")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Public_Policy_Domain_ {
  id: ID!

  name_id: String! @id @search(by: [hash, term, fulltext])

  names: [_Name_] @hasInverse(field: "public_policy_domain")
  description: String

  public_policy_domain_group: _Public_Policy_Domain_Group_ @hasInverse(field: "domains_in_group")

  super_domain: [_Public_Policy_Domain_] @hasInverse(field: "sub_domain")
  sub_domain: [_Public_Policy_Domain_] @hasInverse(field: "super_domain")

  government_ministries_departments: _Public_Policy_Domain_Government_Ministries_Departments_
    @hasInverse(field: "public_policy_domain")

  # Policy domain objectives that belong to this domain
  policy_domain_objectives: [_Indian_Union_Government_Policy_Domain_Objective_] @hasInverse(field: "policy_domain")

  citizen_followers: [_Citizen_Profile_] @hasInverse(field: "policy_domains")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# LISTING_NODE. connects all national and state ministries/departments in domains.
type _Public_Policy_Domain_Government_Ministries_Departments_ {
  id: ID!

  public_policy_domain: [_Public_Policy_Domain_] @hasInverse(field: "government_ministries_departments")

  indian_union_government_ministries: [_Indian_Union_Government_Ministry_]
    @hasInverse(field: "policy_domain_ministries_list")
  indian_union_government_departments: [_Indian_Union_Government_Department_]
    @hasInverse(field: "policy_domain_departments_list")
  # indian_state_government: [_Indian_Union_Government_Ministry_]
  # indian_union_territory_government: [_Indian_Union_Government_Ministry_]

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END public-policy-domains.graphql ----- 

# ----- legal-document.graphql ----- 
enum _Indian_Legal_Document_Category_ {
  Constitution
  Bill
  Act
  Notification
  Rules
  Regulation
  Order
}

type _Indian_Legal_Document_ {
  id: ID!

  # english title that can be searched
  name_id: String! @id @search(by: [hash, term, fulltext])

  # title in multiple languages
  names: [_Name_!]! @hasInverse(field: "indian_legal_document")

  description: String
  document_type: _Indian_Legal_Document_Category_! @search(by: [exact])

  # is_notified: Boolean!

  # active_version: _Indian_Legal_Document_Version_
  # versions: [_Indian_Legal_Document_Version_]

  # structural_elements: [_Indian_Legal_Document_Structural_Element_]
  # amendments: [_Indian_Legal_Document_Amendment_]

  # enactment_date: DateTime @search
  # enforcement_date: DateTime @search

  # ministry
  # department

  # state

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}
# ----- END legal-document.graphql ----- 

# ----- india/union-government/indian-government.graphql ----- 
# SINGLE_NODE_TYPE
# one node that fans out to multiple nodes
# links to all nodes related to indian governments and its parts
# for now add everyone's latest version only or minimal text
type _Indian_Government_System_ {
  id: ID!

  country: _Country_Government_ @hasInverse(field: "india_government_system_active")

  # only meta data for now
  # TODO constitution should be a separate type
  # constitution: _Indian_Legal_Document_

  # all governments here
  union_governments: [_Indian_Union_Government_]

  ####################
  # UNION GOVERNMENT #
  ####################

  ### EXECUTIVE ###

  # head of union government
  prime_ministers: [_Indian_Prime_Minister_]
  # union government ministries
  cabinet_ministers: [_Indian_Union_Government_Cabinet_Minister_]
  # ministries and departments
  # union_government_ministries_departments: [_Indian_Ministry_Department_]

  ### LEGISLATIVE ###

  # union government legislative
  loksabha: [_Indian_Loksabha_]
  loksabha_constituencies: [_Indian_Loksabha_Constituency_]

  # administrative_divisions
  administrative_divisions: _Indian_Administrative_Divisions

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

enum _Government_Branches_ {
  Legislative
  Executive
  Judiciary
}

# across all branches i.e. legislative, executive, judiciary
# across all government levels i.e. Union, State, Municipality
type _Indian_Union_Government_Official_Role_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_] @hasInverse(field: "indian_union_government_official_role")

  # description of the role.
  description: String

  # link to the role_based_types nodes
  prime_ministers: [_Indian_Prime_Minister_] @hasInverse(field: "indian_union_government_official_role")
  loksabha_members: [_Indian_Loksabha_Member_] @hasInverse(field: "indian_union_government_official_role")
  cabinet_ministers: [_Indian_Union_Government_Cabinet_Minister_]
    @hasInverse(field: "indian_union_government_official_role")
  minister_of_state: [_Indian_Union_Government_Minister_Of_State_]
    @hasInverse(field: "indian_union_government_official_role")
  minister_of_state_independent_charge: [_Indian_Union_Government_Minister_Of_State_Independent_Charge_]
    @hasInverse(field: "indian_union_government_official_role")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# kind of like a version group of the union government
# CREATE_NEW:
# 1. whenever the PM changes;
# 2. whenever loksabha changes
type _Indian_Union_Government_ {
  id: ID!

  prime_minister: _Indian_Prime_Minister_ @hasInverse(field: "government")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "government")
  # council_of_ministers: _Indian_Union_Council_Of_Ministers_ @hasInverse(field: "government")
  # TODO should have active members. we may need versions for cabinet_ministers
  # cabinet_ministers: [_Indian_Union_Government_Cabinet_Minister_] @hasInverse(field: "government")

  loksabha: _Indian_Loksabha_ @hasInverse(field: "union_government")
  # rajyasabha: versions of rajyasabha active during the government was in authority

  # TODO bill may need a separate type. when presented, when passed,
  # revisions and other different steps in the process
  # bills: [_Indian_Legal_Document_]
  # acts: [_Indian_Legal_Document_]

  ministries: [_Indian_Union_Government_Ministry_] @hasInverse(field: "union_government")
  departments: [_Indian_Union_Government_Department_] @hasInverse(field: "union_government")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever the Prime Minister changes
# whenever the loksabha changes
type _Indian_Prime_Minister_ {
  id: ID!

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_ @hasInverse(field: "prime_ministers")
  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "prime_minister")

  # during tenure
  government: [_Indian_Union_Government_] @hasInverse(field: "prime_minister")
  loksabha: _Indian_Loksabha_ @hasInverse(field: "prime_minister")
  # council_of_ministers: _Indian_Union_Council_Of_Ministers_ @hasInverse(field: "prime_minister")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "prime_minister")

  ministries: [_Indian_Union_Government_Ministry_] @hasInverse(field: "prime_minister")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CAN_BE_VERSIONS? - this is temporal. so dont need versions.
# CREATE_NEW:
# whenever any change made to the cabinet. even a single change. does what versioning is for.
# same as council of ministers.
type _Indian_Union_Government_Cabinet_ {
  id: ID!

  government: _Indian_Union_Government_ @hasInverse(field: "cabinet")
  loksabha: _Indian_Loksabha_ @hasInverse(field: "cabinet")
  prime_minister: _Indian_Prime_Minister_ @hasInverse(field: "cabinet")

  # FIXME
  # do we need ministries?
  # FOR: links ministers, minister of states, independent charge ministers by ministry; only links, no redundant info;
  # AGAINST: breaks hierarchy;
  ministries: [_Indian_Union_Government_Ministry_] @hasInverse(field: "cabinet")

  cabinet_ministers: [_Indian_Union_Government_Cabinet_Minister_] @hasInverse(field: "cabinet")
  minister_of_state: [_Indian_Union_Government_Minister_Of_State_] @hasInverse(field: "cabinet")
  minister_of_state_independent_charge: [_Indian_Union_Government_Minister_Of_State_Independent_Charge_]
    @hasInverse(field: "cabinet")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever any new minister-ministry combination is added
type _Indian_Union_Government_Cabinet_Minister_ {
  id: ID!

  # FIXME: See if we need redundant linking
  # loksabha: _Indian_Loksabha_
  # prime_minister: _Indian_Prime_Minister_
  # government: _Indian_Union_Government_

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_ @hasInverse(field: "cabinet_ministers")

  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "cabinet_minister")
  ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "minister")

  # council_of_ministers: _Indian_Union_Council_Of_Ministers_ @hasInverse(field: "council_member_ministers")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "cabinet_ministers")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever any new minister-ministry combination is added
type _Indian_Union_Government_Minister_Of_State_Independent_Charge_ {
  id: ID!

  # loksabha: _Indian_Loksabha_
  # prime_minister: _Indian_Prime_Minister_
  # government: _Indian_Union_Government_

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_
    @hasInverse(field: "minister_of_state_independent_charge")

  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "minister_of_state_independent_charge")

  ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "minister_of_state_independent_charge")
  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "minister_of_state_independent_charge")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# whenever any new minister-ministry combination is added
type _Indian_Union_Government_Minister_Of_State_ {
  id: ID!

  # loksabha: _Indian_Loksabha_
  # prime_minister: _Indian_Prime_Minister_
  # government: _Indian_Union_Government_

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_ @hasInverse(field: "minister_of_state")

  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "minister_of_state")

  ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "minister_of_state")
  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "minister_of_state")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/union-government/indian-government.graphql ----- 

# ----- india/parliament.graphql ----- 
# CREATE_NEW: whenever new loksabha is elected
# may also have versions to cover by-elections
type _Indian_Loksabha_ {
  id: ID!

  names: [_Name_] @hasInverse(field: "indian_union_parliament_loksabha")

  loksabha_number: Int!

  # elections and by-elections
  elections: [_Indian_Loksabha_Election_] @hasInverse(field: "loksabha")

  members: [_Indian_Loksabha_Member_] @hasInverse(field: "loksabha")
  constituencies: [_Indian_Loksabha_Constituency_] @hasInverse(field: "loksabhas")

  prime_minister: _Indian_Prime_Minister_ @hasInverse(field: "loksabha")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "loksabha")
  # council_of_ministers: _Indian_Union_Council_Of_Ministers_ @hasInverse(field: "loksabha")
  union_government: _Indian_Union_Government_ @hasInverse(field: "loksabha")

  # sessions
  # list debates and QnA
  loksabha_sessions: [_Indian_Loksabha_Session_] @hasInverse(field: "loksabha")

  term_start: _Date_Time_
  term_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# for every new session
type _Indian_Loksabha_Session_ {
  id: ID!

  loksabha: _Indian_Loksabha_ @hasInverse(field: "loksabha_sessions")

  # list all the debates, qnas
  # questions_answers: []
  # debates: []
  # bills: []
  # acts: []

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW
# when someone wins an election
type _Indian_Loksabha_Member_ {
  id: ID!

  indian_union_government_official_role: _Indian_Union_Government_Official_Role_ @hasInverse(field: "loksabha_members")

  loksabha: _Indian_Loksabha_ @hasInverse(field: "members")
  constituency_election_result: _Indian_Loksabha_Constituency_Election_Result_ @hasInverse(field: "winner")

  constituency: _Indian_Loksabha_Constituency_ @hasInverse(field: "loksabha_members")
  election: _Indian_Loksabha_Constituency_Election_ @hasInverse(field: "election_winner")

  position_held_by: _Indian_Politician_Version_ @hasInverse(field: "loksabha_member")
  election_winning_political_party: _Indian_Political_Party_Loksabha_Election_ @hasInverse(field: "loksabha_members")

  tenure_start: _Date_Time_
  tenure_end: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/parliament.graphql ----- 

# ----- india/elections/elections.graphql ----- 
# CREATE_NEW
# every general election
# every loksabha by-election
type _Indian_Loksabha_Election_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_loksabha_election")

  # for which loksabha
  loksabha: _Indian_Loksabha_ @hasInverse(field: "elections")

  # how many phases
  phases: [_Indian_Loksabha_Election_Phase_] @hasInverse(field: "election")

  # all the participating constituencies
  constituency_election: [_Indian_Loksabha_Constituency_Election_] @hasInverse(field: "election")

  participating_political_parties: [_Indian_Political_Party_Loksabha_Election_] @hasInverse(field: "loksabha_election")
  pre_poll_coalitions: [_Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_]
    @hasInverse(field: "loksabha_election")

  # no updates field. redundancy acceptable
  started_on: _Date_Time_
  completed_on: _Date_Time_

  result: _Indian_Loksabha_Election_Result_ @hasInverse(field: "election")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Loksabha_Election_Result_ {
  id: ID!

  election: _Indian_Loksabha_Election_ @hasInverse(field: "result")
  constituency_election_result: [_Indian_Loksabha_Constituency_Election_Result_] @hasInverse(field: "election_result")

  result_declaration_date: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# CREATE_NEW:
# 1. every loksabha election that is completed in multiple phases
type _Indian_Loksabha_Election_Phase_ {
  id: ID!

  election: _Indian_Loksabha_Election_ @hasInverse(field: "phases")
  election_date: _Date_Time_

  constituency_election: [_Indian_Loksabha_Constituency_Election_] @hasInverse(field: "election_phase")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Loksabha_Constituency_Election_ {
  id: ID!

  election: _Indian_Loksabha_Election_ @hasInverse(field: "constituency_election")
  election_phase: _Indian_Loksabha_Election_Phase_ @hasInverse(field: "constituency_election")

  constituency: _Indian_Loksabha_Constituency_ @hasInverse(field: "elections")
  candidates: [_Indian_Loksabha_Constituency_Election_Candidate_] @hasInverse(field: "election")
  # participating_political_parties: [_Indian_Political_Party_Loksabha_Election_] @hasInverse(field: "constituencies")

  election_result: _Indian_Loksabha_Constituency_Election_Result_ @hasInverse(field: "constituency_election")
  election_winner: _Indian_Loksabha_Member_ @hasInverse(field: "election")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# objective: which politician from which party fought which election and got what results
type _Indian_Loksabha_Constituency_Election_Candidate_ {
  id: ID!

  candidate: _Indian_Politician_ @hasInverse(field: "loksabha_elections_contested")
  political_party: _Indian_Political_Party_Loksabha_Election_ @hasInverse(field: "candidates_constituencies")

  election: _Indian_Loksabha_Constituency_Election_ @hasInverse(field: "candidates")
  constituency_election_result: _Indian_Loksabha_Constituency_Election_Result_ @hasInverse(field: "candidates")
  candidate_result: _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_ @hasInverse(field: "candidate")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Loksabha_Constituency_Election_Result_ {
  id: ID!

  election_result: _Indian_Loksabha_Election_Result_ @hasInverse(field: "constituency_election_result")

  constituency_election: _Indian_Loksabha_Constituency_Election_ @hasInverse(field: "election_result")

  total_voters: Int
  voter_turnout: Int
  voter_turnout_percentage: Float

  candidates: [_Indian_Loksabha_Constituency_Election_Candidate_] @hasInverse(field: "constituency_election_result")
  candidate_result: [_Indian_Loksabha_Constituency_Election_Result_Candidate_Data_] @hasInverse(field: "overall_result")

  # connect to the loksabha member
  winner: _Indian_Loksabha_Member_ @hasInverse(field: "constituency_election_result")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Loksabha_Constituency_Election_Result_Candidate_Data_ {
  id: ID!

  candidate: _Indian_Loksabha_Constituency_Election_Candidate_ @hasInverse(field: "candidate_result")
  overall_result: _Indian_Loksabha_Constituency_Election_Result_ @hasInverse(field: "candidate_result")

  votes_count: Int
  votes_percentage: Float

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}
# ----- END india/elections/elections.graphql ----- 

# ----- india/elections/political-parties.graphql ----- 
type _Indian_Political_Party_ {
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_!]! @hasInverse(field: "indian_political_party")

  # ideology: [_Political_Ideology_]
  # political_spectrum_position: [_Political_Spectrum_Position_]

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  is_national_party: Boolean

  # all elections fought by political party,
  loksabha_elections: [_Indian_Political_Party_Loksabha_Election_] @hasInverse(field: "political_party")
  # coalitions in those elections
  # and their results.

  # loksabha_election_candidates: []
  # loksabha_memberships: [_Indian_Loksabha_Member_] @hasInverse(field: "political_party")
  members: [_Indian_Political_Party_Member_] @hasInverse(field: "party")

  # political_party_loksabha_election
  # political party
  # which election
  # fielded candidates and constituencies
  # coalition with political_party_loksabha_election
  #

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# OBJECTIVES: which party, fought which loksabha election, fought in which constituencies, which loksabha members won from this
type _Indian_Political_Party_Loksabha_Election_ {
  id: ID!

  loksabha_election: _Indian_Loksabha_Election_ @hasInverse(field: "participating_political_parties")
  political_party: _Indian_Political_Party_ @hasInverse(field: "loksabha_elections")

  candidates_constituencies: [_Indian_Loksabha_Constituency_Election_Candidate_] @hasInverse(field: "political_party")
  loksabha_members: [_Indian_Loksabha_Member_] @hasInverse(field: "election_winning_political_party")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# OBJECTIVES: which parties made a pre-poll coalition.
type _Indian_Political_Party_Pre_Poll_Coalition_Loksabha_Election_ {
  id: ID!

  loksabha_election: _Indian_Loksabha_Election_ @hasInverse(field: "pre_poll_coalitions")
  political_parties: [_Indian_Political_Party_Loksabha_Election_]

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# which politician was part of which party and from when to when
# all politicians who are or have been menber
type _Indian_Political_Party_Member_ {
  id: ID!

  politician: _Indian_Politician_Version_ @hasInverse(field: "political_party_membership")
  party: _Indian_Political_Party_ @hasInverse(field: "members")

  member_from: _Date_Time_
  member_to: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/elections/political-parties.graphql ----- 

# ----- india/ministeries-departments/ministeries.graphql ----- 
# CREATE_NEW:
# 1. when new government is elected
# 2. when new PM is added to existing loksabha
# 3. minister is changed?
# links to all departments in a certain government
# #YET_TO_FIGURE_OUT may need dated versions? to create the timelines.

type _Indian_Union_Government_Ministry_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_!]! @hasInverse(field: "indian_union_government_ministry")

  # broad categories for public policy.  *:* relation with ministries
  # e.g. health, fisheries, agriculture, road infrastructure
  policy_domains: [_Public_Policy_Domain_]

  # objective is self updated listing that connects to all ministries in the domain
  policy_domain_ministries_list: [_Public_Policy_Domain_Government_Ministries_Departments_]
    @hasInverse(field: "indian_union_government_ministries")

  # Policy domain objectives adopted by this ministry
  policy_domain_objective_versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_]
    @hasInverse(field: "ministries")

  # Programs owned by this ministry
  programs: [_Indian_Union_Government_Ministry_Program_] @hasInverse(field: "owner_ministry")

  # Departments under this ministry
  departments: [_Indian_Union_Government_Department_] @hasInverse(field: "ministry")

  union_government: _Indian_Union_Government_ @hasInverse(field: "ministries")
  cabinet: _Indian_Union_Government_Cabinet_ @hasInverse(field: "ministries")

  minister: [_Indian_Union_Government_Cabinet_Minister_] @hasInverse(field: "ministry")
  minister_of_state_independent_charge: [_Indian_Union_Government_Minister_Of_State_Independent_Charge_]
    @hasInverse(field: "ministry")
  minister_of_state: [_Indian_Union_Government_Minister_Of_State_] @hasInverse(field: "ministry")

  prime_minister: _Indian_Prime_Minister_ @hasInverse(field: "ministries")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# subordinate to ministries.
# corresponds to the executive part that is not directly controlled by the elected representatives
# can have versions. for now just list the latest ones.
type _Indian_Union_Government_Department_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_!]! @hasInverse(field: "indian_union_government_department")

  # broad categories for public policy.  *:* relation with ministries
  # e.g. health, fisheries, agriculture, road infrastructure
  policy_domains: [_Public_Policy_Domain_]

  # objective is self updated listing that connects to all ministries in the domain
  policy_domain_departments_list: [_Public_Policy_Domain_Government_Ministries_Departments_]
    @hasInverse(field: "indian_union_government_departments")

  # Policy domain objectives adopted by this department
  policy_domain_objective_versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_]
    @hasInverse(field: "departments")

  union_government: _Indian_Union_Government_ @hasInverse(field: "departments")
  ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "departments")

  parent_department: [_Indian_Union_Government_Department_] @hasInverse(field: "child_departments")
  child_departments: [_Indian_Union_Government_Department_] @hasInverse(field: "parent_department")

  program_implementations: [_Indian_Union_Government_Ministry_Program_Version_Department_]
    @hasInverse(field: "department")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/ministeries-departments/ministeries.graphql ----- 

# ----- india/ministeries-departments/health.graphql ----- 
    # programes
    # departments
    # benefits
    # citizen profiles
    # citizen life-events
    # processes
    # officials
    # documents-reports
    # data-statistics

# ----- END india/ministeries-departments/health.graphql ----- 

# ----- india/ministeries-departments/policy-domains-objectives.graphql ----- 
type _Indian_Union_Government_Policy_Domain_Objective_ {
  id: ID!

  # e.g. reduce MMR
  names: [_Name_] @hasInverse(field: "indian_union_government_policy_domain_objectives")

  # make it searchable
  description: String

  # Policy domain this objective belongs to
  policy_domain: _Public_Policy_Domain_ @hasInverse(field: "policy_domain_objectives")

  # Versions of this objective (for tracking changes in definition)
  versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_] @hasInverse(field: "objective")

  # Active version of this objective
  active_version: _Indian_Union_Government_Policy_Domain_Objective_Version_

  # TODO: link with metrics - real and target corresponding to current status and objective respectively.
  # Metrics to measure progress on this objective
  # success_indicators: [String]

  addressed_by_policy_documents: [_Indian_Union_Government_Policy_Document_] @hasInverse(field: "addresses_objectives")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Versions of a policy domain objective
# For tracking how objective definitions change over time
# e.g. reduce MMR to below 50 by 2010 (version 1)
# e.g. reduce MMR to below 40 by 2020 (version 2)
type _Indian_Union_Government_Policy_Domain_Objective_Version_ {
  id: ID!

  objective: _Indian_Union_Government_Policy_Domain_Objective_ @hasInverse(field: "versions")

  # Objective definition for this version
  definition: String

  # Previous and next versions for tracking history
  previous_version: _Indian_Union_Government_Policy_Domain_Objective_Version_
  successor_version: _Indian_Union_Government_Policy_Domain_Objective_Version_

  # Policy documents that address this objective
  addressed_by_policy_documents: [_Indian_Union_Government_Policy_Document_]
    @hasInverse(field: "addresses_objective_versions")

  # Active Services and Benefits that address this objective
  addressed_by_services: [_Indian_Union_Government_Service_] @hasInverse(field: "addresses_policy_objective_versions")
  addressed_by_benefits: [_Indian_Union_Government_Service_Benefit_]
    @hasInverse(field: "addresses_policy_objective_versions")

  # Citizen groups affected by this problem (using attribute-based approach)
  citizen_attributes: [_Citizen_Attribute_Category_] @hasInverse(field: "policy_objective_versions")
  citizen_group_attributes: [_Citizen_Group_Attribute_Category_] @hasInverse(field: "policy_objective_versions")

  # objective adopted by ministries and departments for any version till date.
  ministries: [_Indian_Union_Government_Ministry_] @hasInverse(field: "policy_domain_objective_versions")
  departments: [_Indian_Union_Government_Department_] @hasInverse(field: "policy_domain_objective_versions")

  # Time period this definition was active
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/ministeries-departments/policy-domains-objectives.graphql ----- 

# ----- india/citizens/citizen-attributes.graphql ----- 
enum _Citizen_Attribute_Category_Type_ {
  Demographic # Gender, ethnicity, etc. (rarely changes)
  Life_Stage # Age groups, pregnancy, etc. (changes predictably)
  Socioeconomic # Income level, employment status (changes unpredictably)
  Health_Status # Medical conditions, disability status (episodic changes)
  Geographic # Rural/urban, specific regions (changes occasionally)
  Educational # Education level, student status (changes in steps)
  Occupational # Job type, sector (changes occasionally)
  Situational # Temporary circumstances (disaster affected, etc.)
}

enum _Citizen_Attribute_Category_Typical_Change_Frequency_ {
  Never
  Yearly
  Monthly
  Weekly
  Daily
}

type _Citizen_Attribute_Category_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "citizen_attribute_categories")

  description: String

  # What type of attribute is this?
  category_type: _Citizen_Attribute_Category_Type_ @search(by: [exact])

  # Is this a binary attribute (yes/no) or can it have multiple values?
  is_binary: Boolean

  # How frequently does this attribute typically change?
  typical_change_frequency: _Citizen_Attribute_Category_Typical_Change_Frequency_ @search(by: [exact])

  # Policy objectives that affect citizens with this attribute
  policy_objective_versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_]
    @hasInverse(field: "citizen_attributes")

  # Benefits that target citizens with this attribute
  targeted_by_benefits: [_Indian_Union_Government_Service_Benefit_] @hasInverse(field: "target_citizen_attributes")

  # Versions of this attribute category (for tracking changes in definition)
  versions: [_Citizen_Attribute_Category_Version_] @hasInverse(field: "attribute_category")

  # Active version of this attribute category
  active_version: _Citizen_Attribute_Category_Version_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# versions of a citizen attribute category
# for example, the definition of "citizen" has changed over time.
# how definitions change over time is important for understanding the evolution of a service
# e.g. definition of "poverty" has changed over time, and this has changed the eligibility criteria for many benefits
type _Citizen_Attribute_Category_Version_ {
  id: ID!

  attribute_category: _Citizen_Attribute_Category_ @hasInverse(field: "versions")

  # Previous and next versions for tracking history
  previous_version: _Citizen_Attribute_Category_Version_
  successor_version: _Citizen_Attribute_Category_Version_

  # Definition for this version
  definition: String

  # Criteria for inclusion in this category
  inclusion_criteria: String

  # Time period this definition was active
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Union_Government_Service_Benefit_Eligibility_Rule_ {
  id: ID!

  benefit: _Indian_Union_Government_Service_Benefit_ @hasInverse(field: "eligibility_rules")

  # Required individual attributes (AND logic)
  required_individual_attributes: [_Citizen_Attribute_Category_]

  # Required group attributes (AND logic)
  required_group_attributes: [_Citizen_Group_Attribute_Category_]

  # Optional individual attributes (OR logic)
  optional_individual_attributes: [_Citizen_Attribute_Category_]

  # Optional group attributes (OR logic)
  optional_group_attributes: [_Citizen_Group_Attribute_Category_]

  # Excluded individual attributes (NOT logic)
  excluded_individual_attributes: [_Citizen_Attribute_Category_]

  # Excluded group attributes (NOT logic)
  excluded_group_attributes: [_Citizen_Group_Attribute_Category_]

  # Time period this rule was active
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/citizens/citizen-attributes.graphql ----- 

# ----- india/citizens/citizen-groups-attributes.graphql ----- 
enum _Citizen_Group_Attribute_Category_Type_ {
  Family_Type # Nuclear, joint, single-parent, etc.
  Geographic_Community # Village, urban neighborhood, etc.
  Administrative_Region # District, block, etc.
  Social_Classification # Caste, tribe, religious community
  Economic_Classification # Income bracket, poverty status
  Occupational_Sector # Agricultural, industrial, service sector
  Organization_Type # Self-help group, cooperative, etc.
  Special_Status # Disaster-affected, migrant, etc.
}

enum _Citizen_Group_Attribute_Typical_Change_Frequency_ {
  Never
  Yearly
  Monthly
  Weekly
  Daily
}

type _Citizen_Group_Attribute_Category_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "citizen_group_attribute_categories")

  description: String

  # What type of group attribute is this?
  category_type: _Citizen_Group_Attribute_Category_Type_ @search(by: [exact])

  # Is this a binary attribute (yes/no) or can it have multiple values?
  is_binary: Boolean

  # How frequently does this attribute typically change?
  typical_change_frequency: _Citizen_Group_Attribute_Typical_Change_Frequency_ @search(by: [exact])

  # Benefits targeting groups with this attribute
  targeted_by_benefits: [_Indian_Union_Government_Service_Benefit_]
    @hasInverse(field: "target_citizen_group_attributes")

  # policy_objectives: [_Indian_Union_Government_Policy_Domain_Objective_Version_] @hasInverse(field: "citizen_group_attributes")

  # Versions of this group attribute (for tracking changes in definition)
  versions: [_Citizen_Group_Attribute_Category_Version_] @hasInverse(field: "attribute_category")

  # Active version of this group attribute
  active_version: _Citizen_Group_Attribute_Category_Version_

  policy_objective_versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_]
    @hasInverse(field: "citizen_group_attributes")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Versions of a citizen group attribute category
type _Citizen_Group_Attribute_Category_Version_ {
  id: ID!

  attribute_category: _Citizen_Group_Attribute_Category_ @hasInverse(field: "versions")

  # Previous and next versions for tracking history
  previous_version: _Citizen_Group_Attribute_Category_Version_
  successor_version: _Citizen_Group_Attribute_Category_Version_

  # Definition for this version
  definition: String

  # Criteria for inclusion in this category
  inclusion_criteria: String

  # Time period this definition was active
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Relationships between group attributes
# For modeling hierarchical or overlapping attributes
type _Citizen_Group_Attribute_Relationship_ {
  id: ID!

  # The attributes in this relationship
  parent_attribute: _Citizen_Group_Attribute_Category_
  child_attribute: _Citizen_Group_Attribute_Category_

  # Type of relationship
  relationship_type: String # "contains", "overlaps", "excludes", etc.
  # Time period this relationship was active
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/citizens/citizen-groups-attributes.graphql ----- 

# ----- india/services/services.graphql ----- 
enum _Nature_Of_Service_ {
  Financial_Assistance
  Technical_Assistance
  Advisory
  Quality_Assurance
  Audit
  Monitoring
  Evaluation
  Medical_Assistance
  Training
}

enum _Indian_Union_Government_Service_Beneficiary_Type_ {
  # focused on individual citizen. personal benefit
  Citizen
  # focused on a group of citizens. group benefit
  Citizen_Group
  # focused on a business. business benefit
  Business
  # focused on a union government organization. union government benefit
  Union_Government_Organization
  # focused on a state government organization. state government Benefit
  State_Government_Organization
}

type _Indian_Union_Government_Service_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_union_government_service")

  description: String

  nature_of_service: _Nature_Of_Service_ @search(by: [exact])

  # Program this service is part of
  program: _Indian_Union_Government_Ministry_Program_ @hasInverse(field: "services")

  # Nodes that deliver this service
  delivery_nodes: [_Indian_Union_Government_Service_Delivery_Node_] @hasInverse(field: "services")

  # Benefits provided by this service
  benefits: [_Indian_Union_Government_Service_Benefit_] @hasInverse(field: "services")

  # Policy objectives addressed by this service
  addresses_policy_objective_versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_]
    @hasInverse(field: "addressed_by_services")

  node_created_on: DateTime
  node_updates: [_Node_Update_]

  # TODO possible additional fields in the future
  # Citizen feedback for this service
  # citizen_feedback: [_Indian_Union_Government_Service_Feedback_] @hasInverse(field: "service")

  # Legal basis for this service
  # legal_basis: [_Indian_Legal_Document_]

  # Eligibility criteria for this service
  # eligibility_criteria: [_Indian_Union_Government_Service_Eligibility_] @hasInverse(field: "service")

  # Performance metrics for this service
  # performance_metrics: [_Indian_Union_Government_Service_Performance_Metrics_] @hasInverse(field: "service")

  # Process to access this service
  # delivery_process: _Indian_Union_Government_Service_Process_ @hasInverse(field: "service")
}

# Benefits provided by this service to specific beneficiary type
type _Indian_Union_Government_Service_Benefit_ {
  # what are the end goals of those services?
  id: ID!

  names: [_Name_] @hasInverse(field: "indian_union_government_service_benefit")

  description: String

  # Services that provide this benefit (changed from singular to plural)
  services: [_Indian_Union_Government_Service_] @hasInverse(field: "benefits")

  # Beneficiaries of this service
  beneficiary_type: _Indian_Union_Government_Service_Beneficiary_Type_ @search(by: [exact])

  # Individual citizen attributes targeted by this benefit
  target_citizen_attributes: [_Citizen_Attribute_Category_] @hasInverse(field: "targeted_by_benefits")

  # Group attributes targeted by this benefit
  target_citizen_group_attributes: [_Citizen_Group_Attribute_Category_] @hasInverse(field: "targeted_by_benefits")

  # Complex eligibility rules for this benefit
  eligibility_rules: [_Indian_Union_Government_Service_Benefit_Eligibility_Rule_] @hasInverse(field: "benefit")

  # What policy objectives this benefit addresses
  addresses_policy_objective_versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_]
    @hasInverse(field: "addressed_by_benefits")

  node_created_on: DateTime
  node_updates: [_Node_Update_]

  # What problem does this benefit address?
  # addresses_policy_objectives: [_Policy_Domain_Objectives_] @hasInverse(field: "addressed_by_benefits")

  # Benefit details
  # benefit_type: String # financial, healthcare, education, etc.
  # benefit_value: String # monetary value or description
  # benefit_duration: String
}

enum _Service_Delivery_Node_Type_ {
  Physical_Office
  Mobile_App
  Website
  Call_Center
  SMS
  Email
  Social_Media
  Kiosk
  Mobile_Van
  Door_To_Door_Delivery_Officials
}

# A node that delivers a service
# e.g. District NCD Clinics is a _Indian_Union_Government_Service_Delivery_Node_
type _Indian_Union_Government_Service_Delivery_Node_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_union_government_service_delivery_node")
  description: String

  # Programs this node type is part of
  programs: [_Indian_Union_Government_Ministry_Program_] @hasInverse(field: "service_delivery_nodes")

  # Services delivered through this node type
  services: [_Indian_Union_Government_Service_] @hasInverse(field: "delivery_nodes")

  # Instances of this node type
  instances: [_Indian_Union_Government_Service_Delivery_Node_Instance_] @hasInverse(field: "node_type")

  # Channels used by this node type
  node_type: _Service_Delivery_Node_Type_ @search(by: [exact])

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# An instance of a service delivery node
# e.g. District NCD Clinic in New Delhi is an _Indian_Union_Government_Service_Delivery_Node_Instance_
type _Indian_Union_Government_Service_Delivery_Node_Instance_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_union_government_service_delivery_node_instance")

  description: String

  node_type: _Indian_Union_Government_Service_Delivery_Node_ @hasInverse(field: "instances")

  versions: [_Indian_Union_Government_Service_Delivery_Node_Instance_Version_] @hasInverse(field: "self")

  active_version: _Indian_Union_Government_Service_Delivery_Node_Instance_Version_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Union_Government_Service_Delivery_Node_Instance_Version_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_union_government_service_delivery_node_instance_version")

  self: _Indian_Union_Government_Service_Delivery_Node_Instance_ @hasInverse(field: "versions")

  description: String

  # if the node is a physical office
  location: _Geo_
  # if the node is a mobile app
  app_store_link: String
  # if the node is a website
  website_link: String
  # if the node is a call center
  call_center_number: String
  # if the node is a SMS
  sms_number: String
  # if the node is a social media
  social_media_handle: String
  # if the node is a Kiosk
  kiosk_number: String
  # if the node is a mobile van
  mobile_van_number: String
  # if the node is a door to door delivery official
  door_to_door_delivery_official_number: String
  # if the node is an email
  email_address: String

  updates: [_Indian_Union_Government_Service_Delivery_Node_Instance_Version_Update_] @hasInverse(field: "version")

  # Add the missing inverse fields for previous_version and next_version
  previous_version: _Indian_Union_Government_Service_Delivery_Node_Instance_Version_Update_
    @hasInverse(field: "next_version")
  next_version: _Indian_Union_Government_Service_Delivery_Node_Instance_Version_Update_
    @hasInverse(field: "previous_version")

  node_created_on: DateTime
  node_updates: [_Node_Update_]

  established_on: _Date_Time_
  disestablished_on: _Date_Time_
}

enum _Change_Type_ {
  Location_Change
  Contact_Information_Change

  Website_Link_Change
  Website_Link_Broken

  App_Store_Link_Change
  App_Store_Link_Broken

  Call_Center_Number_Change
  Call_Center_Number_Broken

  SMS_Number_Change
  SMS_Number_Broken

  Social_Media_Handle_Change
  Social_Media_Handle_Broken

  Kiosk_Number_Change
  Kiosk_Number_Broken

  Mobile_Van_Number_Change
  Mobile_Van_Number_Broken

  Email_Address_Change
  Email_Address_Broken

  Door_To_Door_Delivery_Official_Number_Change
  Door_To_Door_Delivery_Official_Number_Broken

  Inaccessible
  Inaccurate_Information

  Discontinued
}

type _Indian_Union_Government_Service_Delivery_Node_Instance_Version_Update_ {
  id: ID!

  version: _Indian_Union_Government_Service_Delivery_Node_Instance_Version_ @hasInverse(field: "updates")

  previous_version: _Indian_Union_Government_Service_Delivery_Node_Instance_Version_ @hasInverse(field: "next_version")
  next_version: _Indian_Union_Government_Service_Delivery_Node_Instance_Version_ @hasInverse(field: "previous_version")

  description: String

  change_type: _Change_Type_ @search(by: [exact])

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# service delivery node instance versions that were active at a given point in time
# for example, all police stations in a state at a given point in time.
type _Indian_Union_Government_Service_Delivery_Node_Instance_Version_Group_ {
  id: ID!

  name_id: String @search(by: [exact])

  # The date and time this version group became active
  established_on: _Date_Time_

  # All active service delivery node versions at this point in time
  delivery_node_versions: [_Indian_Union_Government_Service_Delivery_Node_Instance_Version_]

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# service to delivery node relationship version type to track temporal relationships
type _Indian_Union_Government_Service_To_Delivery_Node_Relationship_ {
  id: ID!

  service: _Indian_Union_Government_Service_
  delivery_node_version: _Indian_Union_Government_Service_Delivery_Node_Instance_Version_

  # relationship_type: String @search(by: [exact])

  valid_from: _Date_Time_
  valid_until: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/services/services.graphql ----- 

# ----- india/services/programmes.graphql ----- 
enum _Indian_Union_Government_Ministry_Program_Status_ {
  Active
  Completed
  Planned
}

enum _Indian_Union_Government_Ministry_Program_Version_Change_ {
  Created
  Modified
  Merged
  Split
  Renamed
  Budget_Changed
  Scope_Changed
  Ministry_Changed
  Department_Changed
}

# DIRECTORY_NODE_TYPE
# One node for every program
# has multiple versions for different states at different times
type _Indian_Union_Government_Ministry_Program_ {
  # ministry policy to implementation plans and budget
  id: ID!
  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_] @hasInverse(field: "indian_union_government_ministry_program")

  description: String

  # Which ministry owns this program
  owner_ministry: _Indian_Union_Government_Ministry_ @hasInverse(field: "programs")

  # Policy domains this program addresses
  policy_domains: [_Public_Policy_Domain_]

  # Policy documents this program is derived from
  source_policy_documents: [_Indian_Union_Government_Policy_Document_] @hasInverse(field: "derived_programs")

  # Services offered under this program
  services: [_Indian_Union_Government_Service_] @hasInverse(field: "program")

  # Service delivery nodes for this program
  service_delivery_nodes: [_Indian_Union_Government_Service_Delivery_Node_] @hasInverse(field: "programs")

  # parent program
  parent_program: _Indian_Union_Government_Ministry_Program_
  child_programs: [_Indian_Union_Government_Ministry_Program_] @hasInverse(field: "parent_program")

  # Program timeline
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  versions: [_Indian_Union_Government_Ministry_Program_Version_] @hasInverse(field: "self")
  reorganisations: [_Indian_Union_Government_Ministry_Program_Reorganisation_] @hasInverse(field: "programs")

  active_version: _Indian_Union_Government_Ministry_Program_Version_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Union_Government_Ministry_Program_Reorganisation_ {
  id: ID!

  # Link to the historical event that caused this reorganization
  historical_event: _Indian_Event_Ministry_Program_Reorganisation_ @hasInverse(field: "program_reorganisations")

  # affected programs
  programs: [_Indian_Union_Government_Ministry_Program_] @hasInverse(field: "reorganisations")
  # new versions of programs
  program_versions: [_Indian_Union_Government_Ministry_Program_Version_] @hasInverse(field: "reorganisation")

  # changes in the program
  changes: [_Indian_Union_Government_Ministry_Program_Version_Change_]

  reorganised_on: _Date_Time_
}

# active versions of all programs at a point in time
# objective is to simplify the query and have easy access to all active versions at a point in time
type _Indian_Union_Government_Ministry_Program_Version_Group_ {
  id: ID!

  # The date and time this version of all programs became active
  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  versions: [_Indian_Union_Government_Ministry_Program_Version_]

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Union_Government_Ministry_Program_Version_ {
  id: ID!

  # name_id: String! @id @search(by: [exact, term, fulltext])

  previous_version: _Indian_Union_Government_Ministry_Program_Version_
  successor_version: _Indian_Union_Government_Ministry_Program_Version_

  self: _Indian_Union_Government_Ministry_Program_ @hasInverse(field: "versions")

  # The reorganisation that preceded this version
  reorganisation: _Indian_Union_Government_Ministry_Program_Reorganisation_ @hasInverse(field: "program_versions")

  # description of the changes in this version with reference to the previous version
  version_description: String

  # status of the program for this version
  program_status: _Indian_Union_Government_Ministry_Program_Status_ @search(by: [exact])

  # Departments implementing this version of the program
  implementing_departments: [_Indian_Union_Government_Ministry_Program_Version_Department_]
    @hasInverse(field: "program_version")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# Departments implementing this version of the program
type _Indian_Union_Government_Ministry_Program_Version_Department_ {
  id: ID!

  name_id: String @search(by: [exact])

  program_version: _Indian_Union_Government_Ministry_Program_Version_ @hasInverse(field: "implementing_departments")
  department: _Indian_Union_Government_Department_ @hasInverse(field: "program_implementations")

  # Role of department in this program version
  role_description: String

  # Is this department the primary implementer?
  is_primary_implementer: Boolean @search

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/services/programmes.graphql ----- 

# ----- india/policy/government-policy-documents.graphql ----- 
enum _Indian_Union_Government_Policy_Document_Type_ {
  Policy_Framework
  Strategy_Document
  Action_Plan
  Guidelines
  Circular
  Notification
  Memorandum
  Resolution
  White_Paper
  Vision_Document
  Five_Year_Plan
  Annual_Plan
}

# enum _Indian_Union_Government_Policy_Document_Status_ {
#   Draft
#   Under_Review
#   Approved
#   Implemented
#   Superseded
#   Archived
# }

# A government policy document that addresses policy objectives
type _Indian_Union_Government_Policy_Document_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_union_government_policy_documents")

  description: String

  # Document type
  document_type: _Indian_Union_Government_Policy_Document_Type_ @search(by: [exact])

  # Issuing authority
  issuing_ministry: _Indian_Union_Government_Ministry_
  issuing_department: _Indian_Union_Government_Department_

  # Policy objectives addressed by this document
  addresses_objectives: [_Indian_Union_Government_Policy_Domain_Objective_]
    @hasInverse(field: "addressed_by_policy_documents")
  addresses_objective_versions: [_Indian_Union_Government_Policy_Domain_Objective_Version_]
    @hasInverse(field: "addressed_by_policy_documents")

  # Document timeline
  published_on: _Date_Time_
  effective_from: _Date_Time_
  effective_until: _Date_Time_

  # Programs derived from this policy document
  derived_programs: [_Indian_Union_Government_Ministry_Program_] @hasInverse(field: "source_policy_documents")

  node_created_on: DateTime
  node_updates: [_Node_Update_]

  # TODO applicable region profile. can have multiple regions, can have attribute based regions
  #  can have multiple tiers of applicability. e.g. MMR focus states and low focus states.

  # Document status
  # status: _Indian_Union_Government_Policy_Document_Status_ @search(by: [exact])

  # issuing_state_government: _Indian_State_Government_

  # Programs derived from this policy document
  # derived_programs: [_Indian_Union_Government_Ministry_Program_] @hasInverse(field: "source_policy_documents")

  # Regional applicability
  # is_national: Boolean
}

# ----- END india/policy/government-policy-documents.graphql ----- 

# ----- india/regions/meta-data.graphql ----- 
# SINGLE_NODE_TYPE
# DIRECTORY_NODE_TYPE
# one node for India
# has multiple versions for different state of administrative structures at different times
type _Indian_Administrative_Divisions {
  id: ID!

  states_union_territories: [_Indian_State_Union_Territory_]
  districts: [_Indian_District_]
}

enum _Indian_Region_Type_ {
  State
  Union_Territory
  District
  Zonal_Council
  Vidhansabha_Constituency
  Loksabha_Constituency
}

# SINGLE_NODE_TYPE
# DIRECTORY_NODE_TYPE
# one node for India
# has multiple versions for different state of legislative structures at different times
type _Indian_Legislative_Divisions {
  id: ID!

  # states_union_territories: [_Indian_State_Union_Territory_]
  loksabha_constituencies: [_Indian_Loksabha_Constituency_]
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_]
}

# # district courts? location of courts
# type _Indian_Judicial_Divisions {
#   id: ID!
# }

enum _Indian_State_Or_Union_Territory_Category_ {
  State
  Union_Territory
}

enum _Indian_Division_Version_Change_ {
  Formation
  Reorganisation
}

enum _Indian_Legislative_Constituency_Reservation_ {
  SC
  ST
  NONE
  SANGHA
  BL
}

# ----- END india/regions/meta-data.graphql ----- 

# ----- india/regions/state-union-territory.graphql ----- 
# DIRECTORY_NODE_TYPE
# One node for every state or union territory
# has multiple versions for different state of administrative structures at different times
type _Indian_State_Union_Territory_ {
  # districts blocks, tehsil etc.
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_state_union_territory")

  state_or_union_territory: _Indian_State_Or_Union_Territory_Category_ @search(by: [hash])

  regions: [_Indian_State_Union_Territory_Version_Region_] @hasInverse(field: "self")
  versions: [_Indian_State_Union_Territory_Version_] @hasInverse(field: "self")
  reorganisations: [_Indian_State_Union_Territory_Reorganisation_] @hasInverse(field: "states_union_territories")

  active_version: _Indian_State_Union_Territory_Version_

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  vehicle_code: String @search(by: [hash])
  iso_code: String @search(by: [hash])

  established_on: _Date_Time_ @hasInverse(field: "indian_state_union_territory_established_on")
  disestablished_on: _Date_Time_ @hasInverse(field: "indian_state_union_territory_disestablished_on")

  # TODO
  # officials, events
  citizen_followers: [_Citizen_Profile_] @hasInverse(field: "state_or_union_territories")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_State_Union_Territory_Reorganisation_ {
  id: ID!

  name_id: String @search(by: [exact])
  names: [_Name_] @hasInverse(field: "indian_state_union_territory_reorganisation")

  # affected state_or_union_territory
  states_union_territories: [_Indian_State_Union_Territory_] @hasInverse(field: "reorganisations")
  # new versions of state_or_union_territory
  state_or_union_territory_versions: [_Indian_State_Union_Territory_Version_] @hasInverse(field: "reorganisation")

  historical_event: _Indian_Event_Administrative_Region_Reorganisation_
    @hasInverse(field: "state_union_territory_reorganisations")

  reorganised_on: _Date_Time_
}

type _Indian_State_Union_Territory_Version_Group_ {
  id: ID!

  # name_id: String! @id @search(by: [exact]) # unique id for each all_district version
  name_id: String @search(by: [exact])

  # The date and time this version of all districts became active
  established_on: DateTime

  # Not bidirectional
  states_union_territories: [_Indian_State_Union_Territory_Version_]

  # Metadata about all reorganisations that caused present state
  # reorganisations: [_Indian_State_Union_Territory_Reorganisation_]

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_State_Union_Territory_Version_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  # TODO need to establish relation with previous version, and show what are the changes made

  # not bidirectional because that name will be there in the main node,
  # thus the purpose of having an entry point is fulfilled already.
  official_name: _Name_

  self: _Indian_State_Union_Territory_ @hasInverse(field: "versions")
  region: _Indian_State_Union_Territory_Version_Region_ @hasInverse(field: "version")

  reorganisation: _Indian_State_Union_Territory_Reorganisation_ @hasInverse(field: "state_or_union_territory_versions")

  change: _Indian_Division_Version_Change_ @search

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_State_Union_Territory_Version_Region_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  self: _Indian_State_Union_Territory_ @hasInverse(field: "regions")
  version: _Indian_State_Union_Territory_Version_ @hasInverse(field: "region")

  osm_id: String @search(by: [hash])

  geo_boundary: [_Geo_] @hasInverse(field: "indian_states_union_territory_boundary")

  states_union_territories: [_Indian_State_Union_Territory_Version_Region_]
    @hasInverse(field: "states_union_territories")
  districts: [_Indian_District_Version_Region_] @hasInverse(field: "states_union_territories")
  sub_districts: [_Indian_Sub_District_Version_Region_] @hasInverse(field: "states_union_territories")
  loksabha_constituencies: [_Indian_Loksabha_Constituency_Version_Region_]
    @hasInverse(field: "states_union_territories")
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_Version_Region_]
    @hasInverse(field: "states_union_territories")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/regions/state-union-territory.graphql ----- 

# ----- india/regions/district.graphql ----- 
# DIRECTORY_NODE_TYPE
# One node for every district
# has multiple versions for different state of administrative structures at different times
type _Indian_District_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_district")

  regions: [_Indian_District_Version_Region_] @hasInverse(field: "self")

  versions: [_Indian_District_Version_] @hasInverse(field: "self")
  reorganisations: [_Indian_District_Reorganisation_] @hasInverse(field: "districts")

  active_version: _Indian_District_Version_

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events
  citizen_followers: [_Citizen_Profile_] @hasInverse(field: "districts")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_District_Reorganisation_ {
  id: ID!

  name_id: String @search(by: [exact])
  names: [_Name_] @hasInverse(field: "indian_district_reorganisation")

  # Link to the historical event that caused this reorganization
  historical_event: _Indian_Event_Administrative_Region_Reorganisation_ @hasInverse(field: "district_reorganisations")

  # TODO should this be bidirectional?
  # Should all changes made to direct sub-regions be added to parent?
  state_or_union_territory: _Indian_State_Union_Territory_Version_Region_

  # affected districts
  districts: [_Indian_District_] @hasInverse(field: "reorganisations")
  # new versions of districts
  district_versions: [_Indian_District_Version_] @hasInverse(field: "reorganisation")

  reorganised_on: _Date_Time_
}

# active versions of all districts at a point in time
type _Indian_District_Version_Group_ {
  id: ID!

  # name_id: String! @id @search(by: [exact]) # unique id for each all_district version
  name_id: String @search(by: [exact])

  # The date and time this version of all districts became active
  established_on: DateTime

  # Not bidirectional
  districts: [_Indian_District_Version_]

  # Metadata about the reason this node was created
  # reorganisation: _Indian_District_Reorganisation_

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_District_Version_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  # Explicit relationships with previous and next versions
  previous_version: _Indian_District_Version_
  successor_version: _Indian_District_Version_

  # not bidirectional because that name will be there in the main node,
  # thus the purpose of having an entry point is fulfilled already.
  official_name: _Name_

  self: _Indian_District_ @hasInverse(field: "versions")
  region: _Indian_District_Version_Region_ @hasInverse(field: "version")

  reorganisation: _Indian_District_Reorganisation_ @hasInverse(field: "district_versions")

  change: _Indian_Division_Version_Change_ @search

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# e.g. if a district is divided. the child_district will have both region and self established on as same_date
# for parent_district, there will be new region with same_date, old parent_district region will have destablished_on as same_date
type _Indian_District_Version_Region_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  self: _Indian_District_ @hasInverse(field: "regions")
  version: _Indian_District_Version_ @hasInverse(field: "region")

  osm_id: String @search(by: [hash])

  states_union_territories: [_Indian_State_Union_Territory_Version_Region_] @hasInverse(field: "districts")
  districts: [_Indian_District_Version_Region_] @hasInverse(field: "districts")
  sub_districts: [_Indian_Sub_District_Version_Region_] @hasInverse(field: "districts")
  loksabha_constituencies: [_Indian_Loksabha_Constituency_Version_Region_] @hasInverse(field: "districts")
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_Version_Region_] @hasInverse(field: "districts")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  geo_boundary: [_Geo_] @hasInverse(field: "indian_district_boundary")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/regions/district.graphql ----- 

# ----- india/regions/loksabha-constituency.graphql ----- 
# DIRECTORY_NODE_TYPE
# One node for every loksabha constituency
# has multiple versions for different state of administrative structures at different times
# CREATE_NEW:
# after creation onf new constituency after delimitation
type _Indian_Loksabha_Constituency_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_loksabha_constituency")

  # all loksabhas that had a member from this constituency
  loksabhas: [_Indian_Loksabha_] @hasInverse(field: "constituencies")
  # all members so far
  loksabha_members: [_Indian_Loksabha_Member_] @hasInverse(field: "constituency")
  # all elections so far
  elections: [_Indian_Loksabha_Constituency_Election_] @hasInverse(field: "constituency")

  regions: [_Indian_Loksabha_Constituency_Version_Region_] @hasInverse(field: "self")
  versions: [_Indian_Loksabha_Constituency_Version_] @hasInverse(field: "self")
  reorganisations: [_Indian_Loksabha_Constituency_Reorganisation_] @hasInverse(field: "loksabha_constituencies")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  active_version: _Indian_Loksabha_Constituency_Version_

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events
  citizen_followers: [_Citizen_Profile_] @hasInverse(field: "loksabha_constituencies")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Loksabha_Constituency_Reorganisation_ {
  id: ID!

  name_id: String @search(by: [exact])
  names: [_Name_] @hasInverse(field: "indian_loksabha_constituency_reorganisation")

  # affected loksabha constituencies
  loksabha_constituencies: [_Indian_Loksabha_Constituency_] @hasInverse(field: "reorganisations")
  # new versions of loksabha constituencies
  loksabha_constituency_versions: [_Indian_Loksabha_Constituency_Version_] @hasInverse(field: "reorganisation")

  historical_event: _Indian_Event_Administrative_Region_Reorganisation_
    @hasInverse(field: "loksabha_constituency_reorganisations")

  reorganised_on: _Date_Time_
}

type _Indian_Loksabha_Constituency_Version_Group_ {
  id: ID!

  # name_id: String! @id @search(by: [exact])
  name_id: String @search(by: [exact])

  # The date and time this version of all districts became active
  established_on: DateTime

  # Not bidirectional
  districts: [_Indian_Loksabha_Constituency_Version_]

  # Metadata about the reason this node was created
  # reorganisation: _Indian_District_Reorganisation_

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Loksabha_Constituency_Version_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  # TODO need to establish relation with previous version, and show what are the changes made

  # not bidirectional because that name will be there in the main node,
  # thus the purpose of having an entry point is fulfilled already.
  official_name: _Name_

  self: _Indian_Loksabha_Constituency_ @hasInverse(field: "versions")
  region: _Indian_Loksabha_Constituency_Version_Region_ @hasInverse(field: "version")

  reorganisation: _Indian_Loksabha_Constituency_Reorganisation_ @hasInverse(field: "loksabha_constituency_versions")

  change: _Indian_Division_Version_Change_ @search

  constituency_number: String @search(by: [exact, term, fulltext])
  reservation: _Indian_Legislative_Constituency_Reservation_ @search(by: [exact])

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Loksabha_Constituency_Version_Region_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  self: _Indian_Loksabha_Constituency_ @hasInverse(field: "regions")

  version: _Indian_Loksabha_Constituency_Version_ @hasInverse(field: "region")

  states_union_territories: [_Indian_State_Union_Territory_Version_Region_]
    @hasInverse(field: "loksabha_constituencies")
  districts: [_Indian_District_Version_Region_] @hasInverse(field: "loksabha_constituencies")
  sub_districts: [_Indian_Sub_District_Version_Region_] @hasInverse(field: "loksabha_constituencies")
  loksabha_constituencies: [_Indian_Loksabha_Constituency_Version_Region_] @hasInverse(field: "loksabha_constituencies")
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_Version_Region_]
    @hasInverse(field: "loksabha_constituencies")

  geo_boundary: [_Geo_] @hasInverse(field: "indian_loksabha_constituency_boundary")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/regions/loksabha-constituency.graphql ----- 

# ----- india/regions/vidhansabha-constituency.graphql ----- 
# DIRECTORY_NODE_TYPE
# One node for every vidhansabha constituency
# has multiple versions for different state of administrative structures at different times
# CREATE_NEW:
# after creation of new constituency after delimitation
type _Indian_Vidhansabha_Constituency_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  names: [_Name_] @hasInverse(field: "indian_vidhansabha_constituency")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  # # all vidhansabhas that had a member from this constituency
  # vidhansabhas: [_Indian_Vidhansabha_] @hasInverse(field: "constituencies")
  # # all members so far
  # vidhansabha_members: [_Indian_Vidhansabha_Member_] @hasInverse(field: "constituency")
  # # all elections so far
  # elections: [_Indian_Vidhansabha_Constituency_Election_] @hasInverse(field: "constituency")

  regions: [_Indian_Vidhansabha_Constituency_Version_Region_] @hasInverse(field: "self")
  versions: [_Indian_Vidhansabha_Constituency_Version_] @hasInverse(field: "self")
  reorganisations: [_Indian_Vidhansabha_Constituency_Reorganisation_] @hasInverse(field: "vidhansabha_constituencies")

  active_version: _Indian_Vidhansabha_Constituency_Version_

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events
  citizen_followers: [_Citizen_Profile_] @hasInverse(field: "vidhansabha_constituencies")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Vidhansabha_Constituency_Reorganisation_ {
  id: ID!

  name_id: String @search(by: [exact])
  names: [_Name_] @hasInverse(field: "indian_vidhansabha_constituency_reorganisation")

  # affected vidhansabha constituencies
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_] @hasInverse(field: "reorganisations")
  # new versions of vidhansabha constituencies
  vidhansabha_constituency_versions: [_Indian_Vidhansabha_Constituency_Version_] @hasInverse(field: "reorganisation")

  historical_event: _Indian_Event_Administrative_Region_Reorganisation_
    @hasInverse(field: "vidhansabha_constituency_reorganisations")

  reorganised_on: _Date_Time_
}

type _Indian_Vidhansabha_Constituency_Version_Group_ {
  id: ID!

  # name_id: String! @id @search(by: [exact])
  name_id: String @search(by: [exact])

  # The date and time this version of all districts became active
  established_on: DateTime

  # Not bidirectional
  districts: [_Indian_Vidhansabha_Constituency_Version_]

  # Metadata about the reason this node was created
  # reorganisation: _Indian_District_Reorganisation_

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Vidhansabha_Constituency_Version_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  # TODO need to establish relation with previous version, and show what are the changes made

  # not bidirectional because that name will be there in the main node,
  # thus the purpose of having an entry point is fulfilled already.
  official_name: _Name_

  self: _Indian_Vidhansabha_Constituency_ @hasInverse(field: "versions")
  region: _Indian_Vidhansabha_Constituency_Version_Region_ @hasInverse(field: "version")

  reorganisation: _Indian_Vidhansabha_Constituency_Reorganisation_
    @hasInverse(field: "vidhansabha_constituency_versions")

  constituency_number: String @search(by: [exact, term, fulltext])
  reservation: _Indian_Legislative_Constituency_Reservation_ @search(by: [exact])

  change: _Indian_Division_Version_Change_ @search

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Vidhansabha_Constituency_Version_Region_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  self: _Indian_Vidhansabha_Constituency_ @hasInverse(field: "regions")

  version: _Indian_Vidhansabha_Constituency_Version_ @hasInverse(field: "region")

  states_union_territories: [_Indian_State_Union_Territory_Version_Region_]
    @hasInverse(field: "vidhansabha_constituencies")
  districts: [_Indian_District_Version_Region_] @hasInverse(field: "vidhansabha_constituencies")
  sub_districts: [_Indian_Sub_District_Version_Region_] @hasInverse(field: "vidhansabha_constituencies")
  loksabha_constituencies: [_Indian_Loksabha_Constituency_Version_Region_]
    @hasInverse(field: "vidhansabha_constituencies")
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_Version_Region_]
    @hasInverse(field: "vidhansabha_constituencies")

  geo_boundary: [_Geo_] @hasInverse(field: "indian_vidhansabha_constituency_boundary")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/regions/vidhansabha-constituency.graphql ----- 

# ----- india/regions/sub-district.graphql ----- 
type _Indian_Sub_District_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_] @hasInverse(field: "indian_sub_district")

  regions: [_Indian_Sub_District_Version_Region_] @hasInverse(field: "self")
  versions: [_Indian_Sub_District_Version_] @hasInverse(field: "self")
  reorganisations: [_Indian_Sub_District_Reorganisation_] @hasInverse(field: "sub_districts")

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  active_version: _Indian_Sub_District_Version_

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Sub_District_Reorganisation_ {
  id: ID!

  name_id: String @search(by: [exact])
  names: [_Name_] @hasInverse(field: "indian_sub_district_reorganisation")

  # affected districts
  sub_districts: [_Indian_Sub_District_] @hasInverse(field: "reorganisations")
  # new versions of districts
  sub_district_versions: [_Indian_Sub_District_Version_] @hasInverse(field: "reorganisation")

  historical_event: _Indian_Event_Administrative_Region_Reorganisation_
    @hasInverse(field: "sub_district_reorganisations")

  reorganised_on: _Date_Time_
}

type _Indian_Sub_District_Version_Group_ {
  id: ID!

  # name_id: String! @id @search(by: [exact]) # unique id for each all_district version
  name_id: String @search(by: [exact])

  # The date and time this version of all sub_districts became active
  established_on: DateTime

  # Not bidirectional
  sub_districts: [_Indian_Sub_District_Version_]

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

type _Indian_Sub_District_Version_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  # TODO need to establish relation with previous version, and show what are the changes made

  # not bidirectional because that name will be there in the main node,
  # thus the purpose of having an entry point is fulfilled already.
  official_name: _Name_

  self: _Indian_Sub_District_ @hasInverse(field: "versions")
  region: _Indian_Sub_District_Version_Region_ @hasInverse(field: "version")

  reorganisation: _Indian_Sub_District_Reorganisation_ @hasInverse(field: "sub_district_versions")

  change: _Indian_Division_Version_Change_ @search

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  # TODO
  # officials, events

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# e.g. if a district is divided. the child_district will have both region and self established on as same_date
# for parent_district, there will be new region with same_date, old parent_district region will have destablished_on as same_date
type _Indian_Sub_District_Version_Region_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])

  self: _Indian_Sub_District_ @hasInverse(field: "regions")
  version: _Indian_Sub_District_Version_ @hasInverse(field: "region")

  osm_id: String @search(by: [hash])

  states_union_territories: [_Indian_State_Union_Territory_Version_Region_] @hasInverse(field: "sub_districts")
  districts: [_Indian_District_Version_Region_] @hasInverse(field: "sub_districts")
  sub_districts: [_Indian_Sub_District_Version_Region_] @hasInverse(field: "sub_districts")
  loksabha_constituencies: [_Indian_Loksabha_Constituency_Version_Region_] @hasInverse(field: "sub_districts")
  vidhansabha_constituencies: [_Indian_Vidhansabha_Constituency_Version_Region_] @hasInverse(field: "sub_districts")

  established_on: _Date_Time_
  disestablished_on: _Date_Time_

  geo_boundary: [_Geo_] @hasInverse(field: "indian_sub_district_boundary")

  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/regions/sub-district.graphql ----- 

# ----- india/events/events.administrative-regions.graphql ----- 
# Events related to administrative region reorganizations in India
type _Indian_Event_Administrative_Region_Reorganisation_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_] @hasInverse(field: "indian_administrative_region_reorganisation_event")

  description: String

  # Event metadata
  event_date: _Date_Time_
  event_type: String @search(by: [exact]) # e.g., "legislation", "court_order", "administrative_decision"
  # Official documents and references
  official_document_reference: String @search(by: [fulltext])
  official_document_url: String
  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  # Relationships to reorganizations
  district_reorganisations: [_Indian_District_Reorganisation_] @hasInverse(field: "historical_event")
  state_union_territory_reorganisations: [_Indian_State_Union_Territory_Reorganisation_]
    @hasInverse(field: "historical_event")
  sub_district_reorganisations: [_Indian_Sub_District_Reorganisation_] @hasInverse(field: "historical_event")
  loksabha_constituency_reorganisations: [_Indian_Loksabha_Constituency_Reorganisation_]
    @hasInverse(field: "historical_event")
  vidhansabha_constituency_reorganisations: [_Indian_Vidhansabha_Constituency_Reorganisation_]
    @hasInverse(field: "historical_event")

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/events/events.administrative-regions.graphql ----- 

# ----- india/events/events.programs.graphql ----- 
type _Indian_Event_Ministry_Program_Reorganisation_ {
  id: ID!

  name_id: String! @id @search(by: [exact, term, fulltext])
  names: [_Name_] @hasInverse(field: "indian_ministry_program_reorganisation_event")

  description: String

  # Event metadata
  event_date: _Date_Time_

  # e.g., "legislation", "court_order", "administrative_decision"
  event_type: String @search(by: [exact])

  # Official documents and references
  official_document_reference: String @search(by: [fulltext])
  official_document_url: String

  wikidata_qid: String @search(by: [hash])
  wikipedia_page: String @search(by: [fulltext])

  # Add the missing inverse field
  program_reorganisations: [_Indian_Union_Government_Ministry_Program_Reorganisation_]
    @hasInverse(field: "historical_event")

  # Audit fields
  node_created_on: DateTime
  node_updates: [_Node_Update_]
}

# ----- END india/events/events.programs.graphql ----- 
